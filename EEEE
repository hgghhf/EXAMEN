const video = document.getElementById('video');
const canvas = document.getElementById('canvas');
const ctx = canvas.getContext('2d');
const resultsDiv = document.getElementById('results');

// Iniciar la cámara
async function setupCamera() {
    const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
    video.srcObject = stream;
    return new Promise((resolve) => {
        video.onloadedmetadata = () => {
            resolve(video);
        };
    });
}

// Cargar el modelo COCO-SSD
async function loadModel() {
    const model = await cocoSsd.load();
    return model;
}

// Detectar objetos en el video
async function detectObjects(model) {
    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
    const predictions = await model.detect(canvas);
    
    predictions.forEach(prediction => {
        // Dibujar rectángulo alrededor del objeto
        ctx.strokeStyle = '#00FFFF';
        ctx.lineWidth = 4;
        ctx.strokeRect(
            prediction.bbox[0],
            prediction.bbox[1],
            prediction.bbox[2],
            prediction.bbox[3]
        );

        // Mostrar etiqueta y confianza
        ctx.fillStyle = '#00FFFF';
        ctx.font = '18px Arial';
        ctx.fillText(
            `${prediction.class} (${Math.round(prediction.score * 100)}%)`,
            prediction.bbox[0],
            prediction.bbox[1] > 10 ? prediction.bbox[1] - 5 : 10
        );
    });

    // Mostrar resultados
    resultsDiv.innerHTML = predictions.map(p => 
        `${p.class}: ${Math.round(p.score * 100)}% - Tamaño aproximado: ${Math.round(p.bbox[2])}x${Math.round(p.bbox[3])} píxeles`
    ).join('<br>');

    requestAnimationFrame(() => detectObjects(model));
}

// Función principal
async function main() {
    await setupCamera();
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    const model = await loadModel();
    detectObjects(model);
}

main();
